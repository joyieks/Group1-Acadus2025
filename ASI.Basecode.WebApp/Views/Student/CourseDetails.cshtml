@model ASI.Basecode.WebApp.Models.StudentCourseDetailsViewModel
@{
    ViewData["Title"] = $"{Model.CourseTitle} - Acadus";
}

<script src="https://cdn.tailwindcss.com"></script>

<main class="max-w-4xl mx-auto px-4 md:px-8 pt-4 pb-12">
    <!-- Header -->
    <section class="text-center mb-12">
        <h1 class="text-4xl font-bold text-[#337D58]  mb-2">@Model.CourseTitle</h1>
        <p class="text-lg text-gray-600">View your grades, appeals, and feedback for this course</p>
    </section>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
        <!-- GPA -->
        <div class="bg-white rounded-xl p-6 shadow-lg text-center">
            <h3 class="text-gray-600 font-medium mb-2">Overall GPA</h3>
            @if (Model.OverallGPA > 0)
            {
                <div class="text-3xl font-bold text-gray-800">@Model.OverallGPA.ToString("F1")</div>
            }
            else
            {
                <p class="text-gray-500 text-sm">No GPA available yet</p>
            }
        </div>

        <!-- Completed -->
        <div class="bg-white rounded-xl p-6 shadow-lg text-center">
            <h3 class="text-gray-600 font-medium mb-2">Completed</h3>
            @if (Model.TotalTasks > 0)
            {
                <div class="text-3xl font-bold text-gray-800">@Model.CompletedTasks/@Model.TotalTasks</div>
            }
            else
            {
                <p class="text-gray-500 text-sm">No completed tasks yet</p>
            }
        </div>

        <!-- Pending -->
        <div class="bg-white rounded-xl p-6 shadow-lg text-center">
            <h3 class="text-gray-600 font-medium mb-2">Pending</h3>
            @if (Model.PendingTasks > 0)
            {
                <div class="text-3xl font-bold text-gray-800">@Model.PendingTasks</div>
            }
            else
            {
                <p class="text-gray-500 text-sm">No pending tasks yet</p>
            }
        </div>
    </div>

    <!-- Tabs Section -->
    <div class="bg-white rounded-xl shadow-lg p-6">
        <!-- Tab Buttons -->
        <div class="flex space-x-6 border-b mb-6">
            <button class="tab-btn active" data-tab="grades">All Grades</button>
            <button class="tab-btn" data-tab="appeals">Appeals</button>
            <button class="tab-btn" data-tab="feedback">Feedback</button>
        </div>

        <!-- Tab Content -->
        <!-- All Grades Tab -->
        <div id="tab-grades" class="tab-content">
            @if (Model.Activities == null || !Model.Activities.Any())
            {
                <div class="text-center py-12 text-gray-500">No activities yet for this course.</div>
            }
            else
            {
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-gray-50 border-b">
                            <tr>
                                <th class="text-left py-4 px-6 font-semibold text-gray-700">Activity</th>
                                <th class="text-left py-4 px-6 font-semibold text-gray-700">Due Date</th>
                                <th class="text-left py-4 px-6 font-semibold text-gray-700">Score</th>
                                <th class="text-left py-4 px-6 font-semibold text-gray-700">Status</th>
                                <th class="text-left py-4 px-6 font-semibold text-gray-700">Actions</th>
                            </tr>   
                        </thead>
                        <tbody>
                            @foreach (var activity in Model.Activities)
                            {
                                <tr class="border-b hover:bg-gray-50 transition-colors">
                                    <td class="py-4 px-6">
                                        <div class="font-medium text-gray-800">@(string.IsNullOrEmpty(activity.Title) ? activity.Name : activity.Title)</div>
                                        @if (!string.IsNullOrEmpty(activity.Description))
                                        {
                                            <div class="text-sm text-gray-500">@activity.Description</div>
                                        }
                                    </td>
                                    <td class="py-4 px-6 text-gray-500">
                                        @if (!string.IsNullOrEmpty(activity.DueDate))
                                        {
                                            @activity.DueDate
                                        }
                                        else
                                        {
                                            @activity.Date.ToString("MMM dd, yyyy")
                                        }
                                    </td>
                                    <td class="py-4 px-6">
                                        @if (activity.Score == "0" || string.IsNullOrEmpty(activity.Score))
                                        {
                                            <span class="text-gray-400">-</span>
                                        }
                                        else
                                        {
                                            <span class="font-medium">@activity.Score%</span>
                                        }
                                    </td>
                                    <td class="py-4 px-6">
                                        @if (activity.Status == "Completed")
                                        {
                                            <span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-medium">Completed</span>
                                        }
                                        else if (activity.Status == "In Progress")
                                        {
                                            <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-xs font-medium">In Progress</span>
                                        }
                                        else if (activity.Status == "Pending")
                                        {
                                            <span class="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-xs font-medium">Pending</span>
                                        }
                                        else if (activity.Status == "Not Started")
                                        {
                                            <span class="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-xs font-medium">Not Started</span>
                                        }
                                        else
                                        {
                                            <span class="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-xs font-medium">@activity.Status</span>
                                        }
                                    </td>
                                    <td class="py-4 px-6">
                                        @if (activity.Status == "Completed" && activity.Score != "0")
                                        {
                                            <button class="bg-acadus-green text-white px-3 py-1 rounded text-xs hover:bg-acadus-light-green transition-colors appeal-btn"
                                                    data-activity="@activity.Title"
                                                    data-score="@activity.Score">
                                                Appeal
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="text-gray-400 text-xs">-</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                @if (Model.TotalPages > 1)
                {
                    <div class="mt-6 flex justify-center">
                        <nav class="flex items-center space-x-2">
                            @if (Model.CurrentPage > 1)
                            {
                                <a href="@Url.Action("CourseDetails", "Student", new { courseId = Model.CourseId, tab = "grades", page = Model.CurrentPage - 1 })" 
                                   class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                    Previous
                                </a>
                            }
                            
                            @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                            {
                                <a href="@Url.Action("CourseDetails", "Student", new { courseId = Model.CourseId, tab = "grades", page = i })" 
                                   class="px-3 py-2 text-sm font-medium @(i == Model.CurrentPage ? "text-white bg-acadus-green" : "text-gray-500 bg-white border border-gray-300") rounded-md hover:bg-gray-50">
                                    @i
                                </a>
                            }
                            
                            @if (Model.CurrentPage < Model.TotalPages)
                            {
                                <a href="@Url.Action("CourseDetails", "Student", new { courseId = Model.CourseId, tab = "grades", page = Model.CurrentPage + 1 })" 
                                   class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                    Next
                                </a>
                            }
                        </nav>
                    </div>
                }
            }
        </div>

        <!-- Appeals Tab -->
        <div id="tab-appeals" class="tab-content hidden">
            @if (Model.Appeals == null || !Model.Appeals.Any())
            {
                <div class="text-center py-12">
                    <h3 class="text-lg font-medium text-gray-700 mb-2">No Appeals Submitted</h3>
                    <p class="text-gray-500">You haven't submitted any appeals for this course yet.</p>
                </div>
            }
            else
            {
                <div class="space-y-4">
                    @foreach (var appeal in Model.Appeals)
                    {
                        <div class="border rounded-lg p-4 bg-white shadow-sm">
                            <div class="flex justify-between items-center mb-2">
                                <h4 class="font-semibold text-gray-800">@(string.IsNullOrEmpty(appeal.Title) ? appeal.ActivityName : appeal.Title)</h4>
                                <span class="text-sm px-3 py-1 rounded-full
                                            @(appeal.Status == "Approved" ? "bg-green-100 text-green-700" : 
                                              appeal.Status == "Rejected" ? "bg-red-100 text-red-700" : "bg-yellow-100 text-yellow-700")">
                                    @appeal.Status
                                </span>
                            </div>
                            <p class="text-gray-600 text-sm mb-1">@(string.IsNullOrEmpty(appeal.Description) ? appeal.Reason : appeal.Description)</p>
                            <p class="text-gray-400 text-xs">
                                @if (!string.IsNullOrEmpty(appeal.Date))
                                {
                                    @appeal.Date
                                }
                                else
                                {
                                    @appeal.DateSubmitted.ToString("MMM dd, yyyy")
                                }
                            </p>
                        </div>
                    }
                </div>
                
                @if (Model.TotalPages > 1)
                {
                    <div class="mt-6 flex justify-center">
                        <nav class="flex items-center space-x-2">
                            @if (Model.CurrentPage > 1)
                            {
                                <a href="@Url.Action("CourseDetails", "Student", new { courseId = Model.CourseId, tab = "appeals", page = Model.CurrentPage - 1 })" 
                                   class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                    Previous
                                </a>
                            }
                            
                            @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                            {
                                <a href="@Url.Action("CourseDetails", "Student", new { courseId = Model.CourseId, tab = "appeals", page = i })" 
                                   class="px-3 py-2 text-sm font-medium @(i == Model.CurrentPage ? "text-white bg-acadus-green" : "text-gray-500 bg-white border border-gray-300") rounded-md hover:bg-gray-50">
                                    @i
                                </a>
                            }
                            
                            @if (Model.CurrentPage < Model.TotalPages)
                            {
                                <a href="@Url.Action("CourseDetails", "Student", new { courseId = Model.CourseId, tab = "appeals", page = Model.CurrentPage + 1 })" 
                                   class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                    Next
                                </a>
                            }
                        </nav>
                    </div>
                }
            }
        </div>

        <!-- Feedback Tab -->
        <div id="tab-feedback" class="tab-content hidden">
            @if (Model.Feedbacks == null || !Model.Feedbacks.Any())
            {
                <div class="text-center py-12">
                    <h3 class="text-lg font-medium text-gray-700 mb-2">No Feedback Available</h3>
                    <p class="text-gray-500">Feedback from instructors will appear here once available.</p>
                </div>
            }
            else
            {
                <div class="space-y-4">
                    @foreach (var feedback in Model.Feedbacks)
                    {
                        <div class="border rounded-lg p-4 bg-white shadow-sm">
                            <div class="flex justify-between items-center mb-2">
                                <h4 class="font-semibold text-gray-800">@(string.IsNullOrEmpty(feedback.Title) ? feedback.ActivityName : feedback.Title)</h4>
                                <span class="text-sm text-gray-500">by @feedback.Instructor</span>
                            </div>
                            <p class="text-gray-700 text-sm mb-1">@(string.IsNullOrEmpty(feedback.Content) ? feedback.Comment : feedback.Content)</p>
                            <p class="text-gray-400 text-xs">
                                @if (!string.IsNullOrEmpty(feedback.Date))
                                {
                                    @feedback.Date
                                }
                                else
                                {
                                    @feedback.DateGiven.ToString("MMM dd, yyyy")
                                }
                            </p>
                        </div>
                    }
                </div>
                
                @if (Model.TotalPages > 1)
                {
                    <div class="mt-6 flex justify-center">
                        <nav class="flex items-center space-x-2">
                            @if (Model.CurrentPage > 1)
                            {
                                <a href="@Url.Action("CourseDetails", "Student", new { courseId = Model.CourseId, tab = "feedback", page = Model.CurrentPage - 1 })" 
                                   class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                    Previous
                                </a>
                            }
                            
                            @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                            {
                                <a href="@Url.Action("CourseDetails", "Student", new { courseId = Model.CourseId, tab = "feedback", page = i })" 
                                   class="px-3 py-2 text-sm font-medium @(i == Model.CurrentPage ? "text-white bg-acadus-green" : "text-gray-500 bg-white border border-gray-300") rounded-md hover:bg-gray-50">
                                    @i
                                </a>
                            }
                            
                            @if (Model.CurrentPage < Model.TotalPages)
                            {
                                <a href="@Url.Action("CourseDetails", "Student", new { courseId = Model.CourseId, tab = "feedback", page = Model.CurrentPage + 1 })" 
                                   class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                    Next
                                </a>
                            }
                        </nav>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Appeal Modal -->
    <div id="appeal-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
        <div class="bg-white rounded-xl shadow-xl w-full max-w-md p-6 relative">
            <button id="close-appeal" class="absolute top-3 right-3 text-gray-400 hover:text-gray-600 text-xl font-bold">&times;</button>

            <h2 class="text-2xl font-semibold text-[#337D58] mb-4">Submit an Appeal</h2>

            <form id="appeal-form">
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Activity</label>
                    <input type="text" id="appeal-activity" class="w-full border border-gray-300 rounded-lg px-3 py-2 bg-gray-100" readonly />
                </div>

                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Reason for Appeal</label>
                    <textarea id="appeal-reason" class="w-full border border-gray-300 rounded-lg px-3 py-2" rows="3" placeholder="Explain your reason..."></textarea>
                </div>

                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Additional Notes (optional)</label>
                    <textarea id="appeal-notes" class="w-full border border-gray-300 rounded-lg px-3 py-2" rows="2" placeholder="Add any extra details..."></textarea>
                </div>

                <div class="flex justify-end space-x-3">
                    <button type="button" id="cancel-appeal" class="px-4 py-2 rounded-lg border border-gray-300 text-gray-600 hover:bg-gray-50">Cancel</button>
                    <button type="submit" class="px-4 py-2 rounded-lg bg-[#337D58] text-white hover:bg-[#2b6c4d]">Submit</button>
                </div>
            </form>
        </div>
    </div>

</main>

<!-- Styles for Tabs -->
<style>
    .tab-btn {
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        padding-left: 1rem;
        padding-right: 1rem;
        font-weight: 500;
        border-bottom-width: 2px;
        border-color: transparent;
        color: #4B5563; /* text-gray-600 */
        transition: all 0.2s;
    }

    .tab-btn:hover {
        color: #22C55E; /* text-acadus-green */
        border-color: #22C55E; /* border-acadus-green */
    }

    .tab-btn.active {
        color: #22C55E; /* text-acadus-green */
        border-color: #22C55E; /* border-acadus-green */
    }
</style>

<!-- JavaScript for Tabs -->
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const tabs = document.querySelectorAll(".tab-btn");
        const contents = document.querySelectorAll(".tab-content");

        tabs.forEach(tab => {
            tab.addEventListener("click", () => {
                const target = tab.getAttribute("data-tab");
                
                // Navigate to the first page of the selected tab
                const currentUrl = new URL(window.location);
                currentUrl.searchParams.set('tab', target);
                currentUrl.searchParams.set('page', '1');
                window.location.href = currentUrl.toString();
            });
        });
        
        // Set active tab based on current tab parameter
        const urlParams = new URLSearchParams(window.location.search);
        const currentTab = urlParams.get('tab') || 'grades';
        
        tabs.forEach(t => t.classList.remove("active"));
        contents.forEach(c => c.classList.add("hidden"));
        
        const activeTab = document.querySelector(`[data-tab="${currentTab}"]`);
        const activeContent = document.getElementById(`tab-${currentTab}`);
        
        if (activeTab) activeTab.classList.add("active");
        if (activeContent) activeContent.classList.remove("hidden");
    });
</script>

<!-- Javascript for Appeal Modal -->
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const modal = document.getElementById("appeal-modal");
        const closeBtn = document.getElementById("close-appeal");
        const cancelBtn = document.getElementById("cancel-appeal");
        const appealButtons = document.querySelectorAll(".appeal-btn");
        const activityInput = document.getElementById("appeal-activity");
        const appealForm = document.getElementById("appeal-form");

        // Open modal when an Appeal button is clicked
        appealButtons.forEach(btn => {
            btn.addEventListener("click", () => {
                const activityTitle = btn.getAttribute("data-activity");
                activityInput.value = activityTitle;
                modal.classList.remove("hidden");
                document.body.classList.add("overflow-hidden");
            });
        });

        // Close modal
        [closeBtn, cancelBtn].forEach(el => {
            el.addEventListener("click", () => {
                modal.classList.add("hidden");
                document.body.classList.remove("overflow-hidden");
            });
        });

        // Form submission (mock)
        appealForm.addEventListener("submit", (e) => {
            e.preventDefault();
            const activity = activityInput.value;
            const reason = document.getElementById("appeal-reason").value;

            if (!reason.trim()) {
                alert("Please provide a reason for your appeal.");
                return;
            }

            // In real app, send via fetch/AJAX to backend
            alert(`Appeal submitted for: ${activity}\nReason: ${reason}`);
            modal.classList.add("hidden");
            appealForm.reset();
            document.body.classList.remove("overflow-hidden");
        });
    });
</script>

