@{
    ViewData["Title"] = "Set Your Password - Acadus";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="row justify-content-center align-items-center min-vh-100">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-lg border-0">
                <div class="card-body p-5">
                    <div class="text-center mb-4">
                        <h2 class="fw-bold">Set Your Password</h2>
                        <p class="text-muted">Create a secure password for your Acadus account</p>
                    </div>

                    <div id="message-container">
                        @if (ViewBag.Error != null)
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                @ViewBag.Error
                                @if (ViewBag.ErrorType == "expired")
                                {
                                    <div class="mt-3">
                                        <button type="button" class="btn btn-sm btn-outline-primary" id="requestNewLinkBtn">
                                            <i class="bi bi-envelope"></i> Request New Link
                                        </button>
                                    </div>
                                }
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }
                        @if (ViewBag.Info != null && ViewBag.Error == null)
                        {
                            <div class="alert alert-info alert-dismissible fade show" role="alert">
                                <i class="bi bi-info-circle-fill me-2"></i>
                                @ViewBag.Info
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }
                    </div>

                    <form id="setPasswordForm">
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-lock"></i>
                                </span>
                                <input type="password"
                                       class="form-control"
                                       id="newPassword"
                                       placeholder="Enter your password"
                                       minlength="8"
                                       required>
                            </div>
                            <small class="form-text text-muted">
                                <i class="bi bi-info-circle"></i> Must be at least 8 characters with uppercase, lowercase, number, and special character
                            </small>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-lock-fill"></i>
                                </span>
                                <input type="password"
                                       class="form-control"
                                       id="confirmPassword"
                                       placeholder="Confirm your password"
                                       minlength="8"
                                       required>
                            </div>
                        </div>

                        <!-- Password Requirements Checklist -->
                        <div class="mb-3">
                            <small class="text-muted d-block mb-2">Password must contain:</small>
                            <div id="password-requirements" class="small">
                                <div id="req-length" class="text-muted"><i class="bi bi-circle"></i> At least 8 characters</div>
                                <div id="req-uppercase" class="text-muted"><i class="bi bi-circle"></i> One uppercase letter (A-Z)</div>
                                <div id="req-lowercase" class="text-muted"><i class="bi bi-circle"></i> One lowercase letter (a-z)</div>
                                <div id="req-number" class="text-muted"><i class="bi bi-circle"></i> One number (0-9)</div>
                                <div id="req-special" class="text-muted"><i class="bi bi-circle"></i> One special character (!*(),.?":{}|<>)</div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div id="password-strength" class="mt-2"></div>
                        </div>

                        <div class="form-check mb-4">
                            <input type="checkbox" class="form-check-input" id="showPassword">
                            <label class="form-check-label" for="showPassword">
                                Show password
                            </label>
                        </div>

                        <button type="submit" class="btn btn-primary w-100 py-2" id="submitBtn">
                            <i class="bi bi-check-circle"></i> Set Password
                        </button>
                    </form>

                    <div class="text-center mt-4">
                        <small class="text-muted">
                            Already set your password? <a href="/Auth/Login" class="text-decoration-none">Login here</a>
                        </small>
                    </div>

                    <div class="text-center mt-3">
                        <small class="text-muted">
                            Didn't receive the email?
                            <a href="#" id="resendEmailLink" class="text-decoration-none">Resend</a>
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .min-vh-100 {
        min-height: 100vh;
    }

    .password-strength-weak {
        color: #dc3545;
    }

    .password-strength-medium {
        color: #ffc107;
    }

    .password-strength-strong {
        color: #28a745;
    }

    .requirement-met {
        color: #28a745 !important;
    }

    .requirement-met i {
        color: #28a745;
    }
</style>

<script>
    // Password reset is handled server-side through Supabase
    // The hash fragment in URL contains the access token from email link

    // Password reset is handled via Supabase magic link
// The hash fragment contains access_token and refresh_token from email

document.addEventListener('DOMContentLoaded', async function() {
    const form = document.getElementById('setPasswordForm');
    const newPasswordInput = document.getElementById('newPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const showPasswordCheckbox = document.getElementById('showPassword');
    const submitBtn = document.getElementById('submitBtn');
    const messageContainer = document.getElementById('message-container');
    const passwordStrengthDiv = document.getElementById('password-strength');
    const resendEmailLink = document.getElementById('resendEmailLink');
    const requestNewLinkBtn = document.getElementById('requestNewLinkBtn');

    // Initialize Supabase client
    const supabaseUrl = '@ViewBag.SupabaseUrl';
    const supabaseKey = '@ViewBag.SupabaseAnonKey';
    
    const { createClient } = supabase;
    const supabaseClient = createClient(supabaseUrl, supabaseKey);

    // Check if user arrived via magic link (has hash fragment)
    if (window.location.hash) {
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        const error = hashParams.get('error');
        const errorCode = hashParams.get('error_code');
        const accessToken = hashParams.get('access_token');
        const type = hashParams.get('type');

        if (error) {
            let errorMessage = 'This password reset link is invalid or has expired.';
            if (errorCode === 'otp_expired') {
                errorMessage = 'This password reset link has expired. Please request a new one.';
            }
            showMessage(errorMessage, 'danger');
            history.replaceState(null, null, ' ');
        } else if (accessToken && type === 'recovery') {
            // Valid recovery token - session should be automatically established
            console.log('Password reset token received from email link');
            
            // Wait a moment for Supabase to establish the session
            await new Promise(resolve => setTimeout(resolve, 500));
            
            // Verify session was established
            const { data: { session }, error: sessionError } = await supabaseClient.auth.getSession();
            
            if (session) {
                console.log('Session established successfully');
                showMessage('Password reset link verified. You can now set your new password.', 'success');
            } else {
                console.error('Failed to establish session:', sessionError);
                showMessage('Error verifying reset link. Please request a new one.', 'danger');
            }
            
            // Clean up URL
            history.replaceState(null, null, window.location.pathname);
        }
    } else {
        // No hash fragment - user probably navigated here directly
        showMessage('Please click the password reset link from your email to continue.', 'info');
    }

    // Show/hide password
    showPasswordCheckbox.addEventListener('change', function() {
        const type = this.checked ? 'text' : 'password';
        newPasswordInput.type = type;
        confirmPasswordInput.type = type;
    });

    // Password requirements checker
    newPasswordInput.addEventListener('input', function() {
        const password = this.value;
        
        checkRequirement('req-length', password.length >= 8);
        checkRequirement('req-uppercase', /[A-Z]/.test(password));
        checkRequirement('req-lowercase', /[a-z]/.test(password));
        checkRequirement('req-number', /\d/.test(password));
        const specialChars = '!*(),.?":{}|<>';
        checkRequirement('req-special', password.split('').some(char => specialChars.includes(char)));

        updatePasswordStrength(password);
    });

    function checkRequirement(elementId, met) {
        const element = document.getElementById(elementId);
        if (met) {
            element.classList.add('requirement-met');
            element.querySelector('i').className = 'bi bi-check-circle-fill';
        } else {
            element.classList.remove('requirement-met');
            element.querySelector('i').className = 'bi bi-circle';
        }
    }

    function updatePasswordStrength(password) {
        if (password.length === 0) {
            passwordStrengthDiv.innerHTML = '';
            return;
        }

        let strength = 0;
        if (password.length >= 8) strength++;
        if (password.length >= 12) strength++;
        if (/[A-Z]/.test(password)) strength++;
        if (/[a-z]/.test(password)) strength++;
        if (/\d/.test(password)) strength++;
        const specialChars = '!*(),.?":{}|<>';
        if (password.split('').some(char => specialChars.includes(char))) strength++;

        let strengthText = '';
        let className = '';

        if (strength < 3) {
            strengthText = 'Weak password';
            className = 'password-strength-weak';
        } else if (strength < 5) {
            strengthText = 'Medium strength';
            className = 'password-strength-medium';
        } else {
            strengthText = 'Strong password';
            className = 'password-strength-strong';
        }

        passwordStrengthDiv.innerHTML = `<small class="${className}"><i class="bi bi-shield-check"></i> ${strengthText}</small>`;
    }

    // Handle form submission
    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        const newPassword = newPasswordInput.value;
        const confirmPassword = confirmPasswordInput.value;

        // Clear previous messages
        const alerts = messageContainer.querySelectorAll('.alert');
        alerts.forEach(alert => {
            if (!alert.querySelector('button.btn')) {
                alert.remove();
            }
        });

        // Validate passwords match
        if (newPassword !== confirmPassword) {
            showMessage('Passwords do not match', 'danger');
            return;
        }

        // Validate password strength (client-side)
        if (newPassword.length < 8) {
            showMessage('Password must be at least 8 characters long', 'danger');
            return;
        }

        if (!/[A-Z]/.test(newPassword)) {
            showMessage('Password must contain at least one uppercase letter (A-Z)', 'danger');
            return;
        }

        if (!/[a-z]/.test(newPassword)) {
            showMessage('Password must contain at least one lowercase letter (a-z)', 'danger');
            return;
        }

        if (!/\d/.test(newPassword)) {
            showMessage('Password must contain at least one number (0-9)', 'danger');
            return;
        }

        const specialChars = '!*(),.?":{}|<>';
        if (!newPassword.split('').some(char => specialChars.includes(char))) {
            showMessage('Password must contain at least one special character (!*(),.?":{}|<>)', 'danger');
            return;
        }

        // Verify user has valid session
        const { data: { session }, error: sessionError } = await supabaseClient.auth.getSession();
        
        if (!session) {
            showMessage('Your session has expired. Please click the password reset link from your email again.', 'danger');
            return;
        }

        // Disable button and show loading
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Setting password...';

        try {
            // Update password using Supabase client (client-side)
            const { data: updateData, error: updateError } = await supabaseClient.auth.updateUser({
                password: newPassword
            });

            if (updateError) {
                console.error('Supabase password update error:', updateError);
                showMessage(updateError.message || 'Failed to update password', 'danger');
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="bi bi-check-circle"></i> Set Password';
                return;
            }

            console.log('Password updated successfully:', updateData);
            showMessage('Password set successfully! Redirecting to login...', 'success');
            
            // Sign out to clear the session
            await supabaseClient.auth.signOut();
            
            setTimeout(() => {
                window.location.href = '/Auth/Login';
            }, 2000);
        } catch (error) {
            console.error('Error:', error);
            showMessage('An error occurred. Please try again.', 'danger');
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<i class="bi bi-check-circle"></i> Set Password';
        }
    });

    // Request new link button
    if (requestNewLinkBtn) {
        requestNewLinkBtn.addEventListener('click', function() {
            const email = prompt('Please enter your email address:');
            if (email) {
                sendPasswordReset(email);
            }
        });
    }

    // Resend email link
    resendEmailLink.addEventListener('click', async function(e) {
        e.preventDefault();

        const email = prompt('Please enter your email address:');
        if (!email) return;

        sendPasswordReset(email);
    });

    async function sendPasswordReset(email) {
        try {
            const response = await fetch('/Account/SendPasswordReset', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email: email })
            });

            const data = await response.json();

            if (data.success) {
                showMessage('Password reset email sent! Please check your inbox.', 'success');
            } else {
                showMessage(data.message || 'Failed to send email', 'warning');
            }
        } catch (error) {
            console.error('Error:', error);
            showMessage('An error occurred. Please try again.', 'danger');
        }
    }

    function showMessage(message, type) {
        const iconMap = {
            'success': 'check-circle-fill',
            'danger': 'exclamation-triangle-fill',
            'warning': 'exclamation-circle-fill',
            'info': 'info-circle-fill'
        };

        const icon = iconMap[type] || 'info-circle-fill';

        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.setAttribute('role', 'alert');
        alertDiv.innerHTML = `
            <i class="bi bi-${icon} me-2"></i>${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        messageContainer.appendChild(alertDiv);
        alertDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
});
</script>

<script src="https://unpkg.com/@@supabase/supabase-js@2"></script>

