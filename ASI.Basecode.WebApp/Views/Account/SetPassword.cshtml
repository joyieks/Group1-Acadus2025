@{
    ViewData["Title"] = "Set Your Password - Acadus";
    Layout = "~/Views/Shared/_MinimalLayout.cshtml";
}

<div class="min-h-screen flex items-center justify-center bg-gradient-to-br from-white-fill to-lighter-shade/20 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div class="bg-white rounded-2xl shadow-xl border border-gray-100 p-8">
            <div class="text-center mb-8">
                <div class="mx-auto h-16 w-16 bg-acadus-green/10 rounded-full flex items-center justify-center mb-4">
                    <svg class="h-8 w-8 text-acadus-green" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                    </svg>
                </div>
                <h2 class="text-3xl font-bold text-gray-900 font-poppins">Set Your Password</h2>
                <p class="mt-2 text-sm text-gray-600 font-poppins">Create a secure password for your Acadus account</p>
            </div>

            <div id="message-container" class="mb-6">
                @if (ViewBag.Error != null)
                {
                    <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-4" role="alert">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <div class="ml-3">
                                <p class="text-sm text-red-800">@ViewBag.Error</p>
                                @if (ViewBag.ErrorType == "expired")
                                {
                                    <div class="mt-3">
                                        <button type="button" class="inline-flex items-center px-3 py-2 border border-red-300 shadow-sm text-sm leading-4 font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500" id="requestNewLinkBtn">
                                            <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                            </svg>
                                            Request New Link
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                @if (ViewBag.Info != null && ViewBag.Error == null)
                {
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4" role="alert">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <div class="ml-3">
                                <p class="text-sm text-blue-800">@ViewBag.Info</p>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <form id="setPasswordForm" class="space-y-6">
                <div>
                    <label for="newPassword" class="block text-sm font-medium text-gray-700 font-poppins mb-2">New Password</label>
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                            </svg>
                        </div>
                        <input type="password"
                               class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-acadus-green focus:border-acadus-green sm:text-sm font-poppins"
                               id="newPassword"
                               placeholder="Enter your password"
                               minlength="8"
                               required>
                    </div>
                    <p class="mt-2 text-xs text-gray-500 font-poppins">
                        Must be at least 8 characters with uppercase, lowercase, number, and special character
                    </p>
                </div>

                <div>
                    <label for="confirmPassword" class="block text-sm font-medium text-gray-700 font-poppins mb-2">Confirm Password</label>
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                        <input type="password"
                               class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-acadus-green focus:border-acadus-green sm:text-sm font-poppins"
                               id="confirmPassword"
                               placeholder="Confirm your password"
                               minlength="8"
                               required>
                    </div>
                </div>

                <!-- Password Requirements Checklist -->
                <div>
                    <p class="text-sm font-medium text-gray-700 font-poppins mb-3">Password must contain:</p>
                    <div id="password-requirements" class="space-y-2">
                        <div id="req-length" class="flex items-center text-sm text-gray-500">
                            <svg class="h-4 w-4 mr-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                            At least 8 characters
                        </div>
                        <div id="req-uppercase" class="flex items-center text-sm text-gray-500">
                            <svg class="h-4 w-4 mr-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                            One uppercase letter (A-Z)
                        </div>
                        <div id="req-lowercase" class="flex items-center text-sm text-gray-500">
                            <svg class="h-4 w-4 mr-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                            One lowercase letter (a-z)
                        </div>
                        <div id="req-number" class="flex items-center text-sm text-gray-500">
                            <svg class="h-4 w-4 mr-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                            One number (0-9)
                        </div>
                        <div id="req-special" class="flex items-center text-sm text-gray-500">
                            <svg class="h-4 w-4 mr-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                            One special character (!*(),.?":{}|<>)
                        </div>
                    </div>
                </div>

                <div>
                    <div id="password-strength"></div>
                </div>

                <div class="flex items-center">
                    <input type="checkbox" class="h-4 w-4 text-acadus-green focus:ring-acadus-green border-gray-300 rounded" id="showPassword">
                    <label for="showPassword" class="ml-2 block text-sm text-gray-700 font-poppins">
                        Show password
                    </label>
                </div>

                <button type="submit" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-acadus-green hover:bg-darker-shade focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-acadus-green font-poppins transition-colors duration-200" id="submitBtn">
                    <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Set Password
                </button>
            </form>

            <div class="mt-8 text-center space-y-3">
                <p class="text-sm text-gray-600 font-poppins">
                    Already set your password? 
                    <a href="/Auth/Login" class="font-medium text-acadus-green hover:text-darker-shade transition-colors">Login here</a>
                </p>
                <p class="text-sm text-gray-600 font-poppins">
                    Didn't receive the email?
                    <a href="#" id="resendEmailLink" class="font-medium text-acadus-green hover:text-darker-shade transition-colors">Resend</a>
                </p>
            </div>
        </div>
    </div>
</div>

<style>
    .password-strength-weak {
        color: #dc2626;
    }

    .password-strength-medium {
        color: #d97706;
    }

    .password-strength-strong {
        color: #059669;
    }

    .requirement-met {
        color: #059669 !important;
    }

    .requirement-met svg {
        color: #059669;
    }
</style>

<script>
    // Password reset is handled server-side through Supabase
    // The hash fragment in URL contains the access token from email link

    // Password reset is handled via Supabase magic link
// The hash fragment contains access_token and refresh_token from email

document.addEventListener('DOMContentLoaded', async function() {
    const form = document.getElementById('setPasswordForm');
    const newPasswordInput = document.getElementById('newPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const showPasswordCheckbox = document.getElementById('showPassword');
    const submitBtn = document.getElementById('submitBtn');
    const messageContainer = document.getElementById('message-container');
    const passwordStrengthDiv = document.getElementById('password-strength');
    const resendEmailLink = document.getElementById('resendEmailLink');
    const requestNewLinkBtn = document.getElementById('requestNewLinkBtn');

    // Initialize Supabase client
    const supabaseUrl = '@ViewBag.SupabaseUrl';
    const supabaseKey = '@ViewBag.SupabaseAnonKey';
    
    const { createClient } = supabase;
    const supabaseClient = createClient(supabaseUrl, supabaseKey);

    // Check if user arrived via magic link (has hash fragment)
    if (window.location.hash) {
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        const error = hashParams.get('error');
        const errorCode = hashParams.get('error_code');
        const accessToken = hashParams.get('access_token');
        const type = hashParams.get('type');

        if (error) {
            let errorMessage = 'This password reset link is invalid or has expired.';
            if (errorCode === 'otp_expired') {
                errorMessage = 'This password reset link has expired. Please request a new one.';
            }
            showMessage(errorMessage, 'danger');
            history.replaceState(null, null, ' ');
        } else if (accessToken && type === 'recovery') {
            // Valid recovery token - session should be automatically established
            console.log('Password reset token received from email link');
            
            // Wait a moment for Supabase to establish the session
            await new Promise(resolve => setTimeout(resolve, 500));
            
            // Verify session was established
            const { data: { session }, error: sessionError } = await supabaseClient.auth.getSession();
            
            if (session) {
                console.log('Session established successfully');
                showMessage('Password reset link verified. You can now set your new password.', 'success');
            } else {
                console.error('Failed to establish session:', sessionError);
                showMessage('Error verifying reset link. Please request a new one.', 'danger');
            }
            
            // Clean up URL
            history.replaceState(null, null, window.location.pathname);
        }
    } else {
        // No hash fragment - user probably navigated here directly
        showMessage('Please click the password reset link from your email to continue.', 'info');
    }

    // Show/hide password
    showPasswordCheckbox.addEventListener('change', function() {
        const type = this.checked ? 'text' : 'password';
        newPasswordInput.type = type;
        confirmPasswordInput.type = type;
    });

    // Password requirements checker
    newPasswordInput.addEventListener('input', function() {
        const password = this.value;
        
        checkRequirement('req-length', password.length >= 8);
        checkRequirement('req-uppercase', /[A-Z]/.test(password));
        checkRequirement('req-lowercase', /[a-z]/.test(password));
        checkRequirement('req-number', /\d/.test(password));
        const specialChars = '!*(),.?":{}|<>';
        checkRequirement('req-special', password.split('').some(char => specialChars.includes(char)));

        updatePasswordStrength(password);
    });

    function checkRequirement(elementId, met) {
        const element = document.getElementById(elementId);
        const svg = element.querySelector('svg');
        if (met) {
            element.classList.add('requirement-met');
            svg.innerHTML = '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />';
        } else {
            element.classList.remove('requirement-met');
            svg.innerHTML = '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />';
        }
    }

    function updatePasswordStrength(password) {
        if (password.length === 0) {
            passwordStrengthDiv.innerHTML = '';
            return;
        }

        let strength = 0;
        if (password.length >= 8) strength++;
        if (password.length >= 12) strength++;
        if (/[A-Z]/.test(password)) strength++;
        if (/[a-z]/.test(password)) strength++;
        if (/\d/.test(password)) strength++;
        const specialChars = '!*(),.?":{}|<>';
        if (password.split('').some(char => specialChars.includes(char))) strength++;

        let strengthText = '';
        let className = '';

        if (strength < 3) {
            strengthText = 'Weak password';
            className = 'password-strength-weak';
        } else if (strength < 5) {
            strengthText = 'Medium strength';
            className = 'password-strength-medium';
        } else {
            strengthText = 'Strong password';
            className = 'password-strength-strong';
        }

        passwordStrengthDiv.innerHTML = `<p class="text-sm ${className} flex items-center"><svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path></svg> ${strengthText}</p>`;
    }

    // Handle form submission
    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        const newPassword = newPasswordInput.value;
        const confirmPassword = confirmPasswordInput.value;

        // Clear previous messages
        const alerts = messageContainer.querySelectorAll('.alert');
        alerts.forEach(alert => {
            if (!alert.querySelector('button.btn')) {
                alert.remove();
            }
        });

        // Validate passwords match
        if (newPassword !== confirmPassword) {
            showMessage('Passwords do not match', 'danger');
            return;
        }

        // Validate password strength (client-side)
        if (newPassword.length < 8) {
            showMessage('Password must be at least 8 characters long', 'danger');
            return;
        }

        if (!/[A-Z]/.test(newPassword)) {
            showMessage('Password must contain at least one uppercase letter (A-Z)', 'danger');
            return;
        }

        if (!/[a-z]/.test(newPassword)) {
            showMessage('Password must contain at least one lowercase letter (a-z)', 'danger');
            return;
        }

        if (!/\d/.test(newPassword)) {
            showMessage('Password must contain at least one number (0-9)', 'danger');
            return;
        }

        const specialChars = '!*(),.?":{}|<>';
        if (!newPassword.split('').some(char => specialChars.includes(char))) {
            showMessage('Password must contain at least one special character (!*(),.?":{}|<>)', 'danger');
            return;
        }

        // Verify user has valid session
        const { data: { session }, error: sessionError } = await supabaseClient.auth.getSession();
        
        if (!session) {
            showMessage('Your session has expired. Please click the password reset link from your email again.', 'danger');
            return;
        }

        // Disable button and show loading
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Setting password...';

        try {
            // Update password using Supabase client (client-side)
            const { data: updateData, error: updateError } = await supabaseClient.auth.updateUser({
                password: newPassword
            });

            if (updateError) {
                console.error('Supabase password update error:', updateError);
                showMessage(updateError.message || 'Failed to update password', 'danger');
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>Set Password';
                return;
            }

            console.log('Password updated successfully:', updateData);
            showMessage('Password set successfully! Redirecting to login...', 'success');
            
            // Sign out to clear the session
            await supabaseClient.auth.signOut();
            
            setTimeout(() => {
                window.location.href = '/Auth/Login';
            }, 2000);
        } catch (error) {
            console.error('Error:', error);
            showMessage('An error occurred. Please try again.', 'danger');
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>Set Password';
        }
    });

    // Request new link button
    if (requestNewLinkBtn) {
        requestNewLinkBtn.addEventListener('click', function() {
            const email = prompt('Please enter your email address:');
            if (email) {
                sendPasswordReset(email);
            }
        });
    }

    // Resend email link
    resendEmailLink.addEventListener('click', async function(e) {
        e.preventDefault();

        const email = prompt('Please enter your email address:');
        if (!email) return;

        sendPasswordReset(email);
    });

    async function sendPasswordReset(email) {
        try {
            const response = await fetch('/Account/SendPasswordReset', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email: email })
            });

            const data = await response.json();

            if (data.success) {
                showMessage('Password reset email sent! Please check your inbox.', 'success');
            } else {
                showMessage(data.message || 'Failed to send email', 'warning');
            }
        } catch (error) {
            console.error('Error:', error);
            showMessage('An error occurred. Please try again.', 'danger');
        }
    }

    function showMessage(message, type) {
        const colorMap = {
            'success': 'green',
            'danger': 'red',
            'warning': 'yellow',
            'info': 'blue'
        };

        const iconMap = {
            'success': '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />',
            'danger': '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />',
            'warning': '<path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />',
            'info': '<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />'
        };

        const color = colorMap[type] || 'blue';
        const icon = iconMap[type] || iconMap['info'];

        const alertDiv = document.createElement('div');
        alertDiv.className = `bg-${color}-50 border border-${color}-200 rounded-lg p-4 mb-4`;
        alertDiv.setAttribute('role', 'alert');
        alertDiv.innerHTML = `
            <div class="flex">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-${color}-400" viewBox="0 0 20 20" fill="currentColor">
                        ${icon}
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-${color}-800">${message}</p>
                </div>
            </div>
        `;

        messageContainer.appendChild(alertDiv);
        alertDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
});
</script>

<script src="https://unpkg.com/@@supabase/supabase-js@2"></script>

